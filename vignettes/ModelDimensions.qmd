---
title: "Model Dimensions Vignette"
author: "William Stockhausen"
crossref: 
  fig-title: Figuure
  tbl-title: Table
comment: "#>"
collapse: true
toc: true
format: 
  html: 
    html-math-method: mathjax
tbl-cap-location: top
fig-cap-location: bottom
prefer-html: true
keep-md: true
keep-yaml: true
vignette: >
  %\VignetteIndexEntry{Model dimensions}
  %\VignetteEngine{tmbGMACS::quarto}
  %\VignetteEncoding{UTF-8}
---

<!--NOTE: for scalar variables,    use: *var*   (italics)  
          for vectors/matrices,etc use: ***V*** (bold-italics) 
          for functions            use: **fcn** (bold) 
          for verbatim code        use: `code` 
-->

```{r setup,echo=FALSE}
  library(tmbGMACS);
```

## Model dimensions 

Model dimensions consist of year (*y*), season (*s*), and a set of categories ({*c*}) into which the population is divided (e.g., sex and size). For a given year, population abundance is integrated across seasons within the year and different processes can occur in different seasons. Levels within a given population category can be nested within another category (e.g., different size classes might be defined for males and females if they exhibited substantially different growth patterns). Two types of model dimensions are distinguished: *sparse* and *dense*. A set of dimensions is characterized as *sparse* when different levels of one dimension are nested within the levels of another dimension such that the resulting set of levels has fewer members in it than the set of dimensions resulting from a complete crossing of all unique dimension levels. The latter set of (fully-crossed) dimensions is characterized as *dense*. 

On the R side of things, a special dataframe (actually, a tibble) referred to as a "dimension map" is used to characterize any set of dimensions, either sparse or dense.The first column in the model dimensions map is simply the row number associated with the unique combination of dimension levels the row reflects. It also provides the index into the population abundance 
vector for that combination of dimensions (and thus allows the extraction of the associated dimension levels given 
the index value). The remaining columns correspond to individual dimensions; for each column, the value for each row is the level (as a factor) of the associated dimension. Rows are ordered by the combination of factor levels across the dimensions, with 
levels changing the fastest in the right-most column.

A dimensions map also has three non-standard attributes: `dmnms`, `dmlvs`, and `dmlns`: 

  - `dmnms` is a character vector with the dimension names.
  - `dmlvs` is a named list of character vectors comprising the unique levels for each dimension.
  - `dmlns` is a named integer vector with the length (number of unique levels) of each dimension.

Given a sparse dimensions map, the corresponding dense map can be obtained by a full crossing of the levels in the sparse map's `dmlvs` attribute.

Most model quantities are represented as vectors, and thus have associated dimensions maps in order to be able to identify the dimension levels associated with each index value.

### Sparse dimension maps
Sparse dimensions are defined using the R function **createSparseDimsMap**. As an example (@tbl-ExSparseDimsMap), the following creates a set of dimensions encompassing year (*y*), season(*s*), sex (*x*), and size (*z*), with different size classes for males and females. Note that the "dimension name(s)" must be added as an attribute `dmnms` to the vector or list defining the levels.

```{r exSparseDimsMap}
#| label: tbl-ExSparseDimsMap
#| tbl-cap: "Example sparse dimensions map."
#| eval: !expr '(require(kableExtra))'
library(tmbGMACS);
#> Create the individual dimensions as vectors or lists (for nested dimensions)
#> --assign the attribute "dmnms", the dimension name(s) (plural if nested)
#> ----model years
vYs = 2001:2005;                  attr(vYs,"dmnms")<-"y";
#> ----model seasons
vSs = c("fall","spring");         attr(vSs,"dmnms")<-"s";
#> ----model sexes
vXs = c("MALE","FEMALE");         attr(vXs,"dmnms")<-"x";
#> ----model sizes, nested with sexes
vZs = list(  MALE=seq(40,60,5),
           FEMALE=seq(25,50,5));  attr(vZs,"dmnms")<-c("x","z");
#>--create the dimensions "map"
dmsSparse = createSparseDimsMap(y=vYs,s=vSs,x=vXs,z=vZs);
dmsSparse |> kableExtra::kbl(booktabs=TRUE,longtable=TRUE);
```

### Dense dimension maps

Given a sparse dimensions map `mapSparse`, the associated dense map can be created using the R function **createFullDimsMap**: 

```{r}
#| label: tbl-ExDenseDimsMap
#| tbl-cap: "Example dense dimensions map (first 20 rows) corrseponding to the previous sparse dimensions map."
#| eval: !expr '(require(kableExtra))'
#| echo: false
dmsDense = createFullDimsMap(dmsSparse);
dmsDense[1:20,] |> kableExtra::kbl(booktabs=TRUE,longtable=TRUE);
```

In the above example, the size (number of rows) of the resulting dense dimensions map (`r nrow(dmsDense)`) is larger than that of the nested dimensions map (`r nrow(dmsSparse)`) because of the different size bins defined for males and females.

### C++ Dimensions class 

The *Dimensions* class defines dimensions on the C++ side and combines information from the sparse and and corresponding dense dimensions maps to allow quick one-dimensional indexing across the combined levels of the dimensions.

```{r, eval=FALSE}
#--TODO: fill this in
#>--create mapping between the sparse and dense dimensions maps
lst = createDimsMaps(y=vYs,s=vSs,x=vXs,z=vZs);
dfrS2D = lst$dfrS2D; #--tibble with 1-d mapping from sparse to dense dimensions levels
dfrD2S = lst$dfrD2S; #--tibble with 1-d mapping from dense to sparse dimensions levels
dims_names = attr(dfrS2D,"dmnms");
dims_lvls  = attr(dfrS2D,"dmlvs");
matS2D = sapply(dfrS2D,as.integer);#--create an integer matrix representing the mapping from sparse to dense dimensions factor level combinations
matD2S = sapply(dfrD2S,as.integer);#--create an integer matrix representing the mapping from dense to sparse dimensions factor level combinations
vecD2S = dfrD2S$sparse_idx;#--only need the mapping from dense (vector index) to sparse (vector value)

#--compile and test Dimensions.hpp as a module "dims_module"
require(Rcpp)
sourceCpp(file="../testing/Dimensions.cpp",embeddedR=FALSE,rebuild=TRUE,
          showOutput=TRUE,verbose=TRUE,dryRun=FALSE)

#--create the C++ Dimensions class object on the R side
dims_obj = new(Dimensions,
               dims_names_=dims_names,
               dims_lvls_=dims_lvls,
               matS2D_=matS2D,
               mapD2S=vecD2S);

#--check the mapping between the sparse and dense 1-d indices
#----on the R side
rw = 7;              #--(arbitrary choice of) 1-d sparse index (1s-based)
rw_ids = matS2D[rw,];#--corresponding 1-d dense index (1s-based) and dimension levels
cat(rw,rw_ids,"\n")
cat(rw_ids[1],matD2S[rw_ids[1],],"\n");
cat(rw_ids[1],unlist(dfrD2S[rw_ids[1],,drop=TRUE]),"\n");#--TODO: need to print factor levels, not factor indices
#----on the C++ side
dims_ids=rw_ids[2:length(rw_ids)];
idxd = dims_obj$getDenseIndex(dims_ids,zerosBased=FALSE);
idxs = dims_obj$getSparseIndex(dims_ids,zerosBased=FALSE);
res2 = dims_obj$getDimensionsLevelsFromSparseIndex(idxs+1,zerosBased=FALSE);
cat(idxs,idxd,res2,"\n");
```

## Aggregating over model dimensions

Data fit in gmacs typically represent quantities aggregated over some combination of population categories, so it is necessary to determine the mappping from model indices to data indices. The function **createAggregatorMap*** provides the required mapping of 1-d indices from one dimensions map to another, as illustrated in the following example (@tbl-Ex2) using the dimensions map `dms` from the previous example:

```{r ex2, eval=FALSE}
#> Example of how to create an aggregator map using "dms" from above
#> to aggregate by year (y) and sex (x) over season (s) and size (z). 
#>    Create dimensions map with only y and x
  aggDims = tmbGMACS::keepDims(dms,keep=c("y","x"));#--keeps only y and x dimensions, recreates 1-d vector index
#>    Create aggregator map from y,x,s,z to y,x
  aggMap  = tmbGMACS::createAggregatorMap(dms,aggDims,keepOrigDims=TRUE);
```

*j* is the vector index for `aggDims`, *i* is the vector index for `dms`.
```{r, eval=FALSE}
#| label: tbl-Ex2
#| tbl-cap: Example aggregator map (from indices i to indices j).
##| eval: !expr 'require(kableExtra)'
#| echo: false
aggMap |> kableExtra::kbl(booktabs=TRUE,longtable=TRUE);
```
