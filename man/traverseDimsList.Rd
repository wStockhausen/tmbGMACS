% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DimensionsFunctions.R
\name{traverseDimsList}
\alias{traverseDimsList}
\title{Create a dataframe representation of a nested dimensions list by
recursively traversing it}
\usage{
traverseDimsList(lst0, name, level = 0, debug = FALSE)
}
\arguments{
\item{lst0}{- dimensions list (or vector of levels for single dimension) to traverse}

\item{name}{- character string to associate with the terminal nesting level}

\item{level}{- counter for outer nesting level (leave at 0)}

\item{debug}{- flag (T/F) to print debugging info (default is FALSE)}
}
\value{
a tibble (see [tibble::tibble()]) with extra attribute "dmnms" copied
from \code{lst0} (or the value of \code{name} if \code{lst0} does not have a
"dmnms" attribute).
}
\description{
Function to create a dataframe representation of a
nested dimensions list by recursively traversing it.
}
\details{
Returns a tibble representation of the nested list by recursively
"unraveling" nested lists until the terminal nested level is reached.
The dimensions list should have a "dmnms" attribute that is a character vector
with the names of the associated dimensions (a vector of levels does not require
a dmnms attribute; the dimension name/dmnms attribute for the resulting tibble
will be the value of \code{name}).
}
\examples{
#--define nested dimensions list
#----nested dimensions represent sex ("x"), maturity ("m"),
#----shell condition ("s"), age ("a"), and size ("z")
vZs = list( MALE=  list(IMMATURE=list(`NEW SHELL`=list(`NO AGEs`=seq(40,60,5))),
                          MATURE=list(`NEW SHELL`=list(`PTM 0`=seq(80,120,10)),
                                      `OLD SHELL`=list(`PTM 1`=seq(80,120,10),
                                                       `PTM 2`=seq(80,120,10)))),
          FEMALE=list(IMMATURE=list(`NEW SHELL`=list(`NO AGEs`=seq(25,50,5))),
                        MATURE=list(`NEW SHELL`=list(`PTM 0`=seq(50,100,10)),
                                    `OLD SHELL`=list(`PTM 1`=seq(50,100,10),
                                                     `PTM 2`=seq(50,100,10)))));
attr(vZs,"dmnms")<-c("x","m","s","a","z");#--define dmnms attribute
require(tmbGMACS);
dfr = traverseDimsList(vZs,"z");
}
